module TheUnit.Model.Payment.BookPayment (BookPayment (..), CreateBookPayment (..)) where

import Data.Aeson ((.:), (.:?), (.=))
import qualified Data.Aeson as J
import qualified Data.Text as T
import GHC.Generics (Generic)
import Network.Integrated.HTTP.Core (_omitNulls)
import TheUnit.Model.Common (Tags)
import TheUnit.Model.Payment.PaymentStatus (Direction, PaymentStatus)
import TheUnit.Model.Relationships (AccountId, CustomerId, TransactionId)
import Prelude hiding (id)

data BookPayment = BookPayment
  { -- | 	Identifier of the book payment resource.
    id :: !T.Text,
    -- | Date only. The date the resource was created.
    -- | RFC3339 format. For more information: https://en.wikipedia.org/wiki/ISO_8601#RFCs
    createdAt :: !T.Text,
    -- | One of Pending, Rejected, Clearing, Sent, Canceled, Returned. See [ACH Status](https://developers.unit.co/#ach-status).
    status :: !PaymentStatus,
    -- | (Optional) More information about the status.
    reason :: !(Maybe T.Text),
    -- | The direction in which the funds flow (either Debit or Credit).
    -- NOTE: The direction of book payment is always Credit, moving funds from account to counterpartyAccount.
    direction :: !(Maybe Direction),
    -- | Payment description (maximum of 10 characters), also known as Company Entry Description, this will show up on statement of the counterparty.
    description :: !T.Text,
    -- | The amount (cents) of the payment.
    amount :: !Int,
    --
    --  Relationships

    -- | The Deposit Account creating the payment.
    accountFrom :: !AccountId,
    -- | The Customer the deposit account belongs to. This relationship is only available if the account belongs to a single customer, business or individual.
    customer :: !(Maybe CustomerId),
    -- | The Counterparty account the payment to be made to.
    accountTo :: !AccountId,
    -- | The Customer the counterparty account belongs to. The customer is either a business or an individual, might be empty if there is more than one associated customer.
    counterpartyCustomer :: !(Maybe CustomerId),
    -- | The Book Transaction generated by this payment.
    transaction :: !(Maybe TransactionId)
  }
  deriving (Show, Generic)

instance Eq BookPayment where
  BookPayment {id = idL} == BookPayment {id = idR} = idL == idR

instance J.FromJSON BookPayment where
  parseJSON = J.withObject "BookPayment" \o -> do
    ("bookPayment" :: T.Text) <- o .: "type"
    attributes <- o .: "attributes"
    relationships <- o .: "relationships"

    _id <- o .: "id"
    createdAt <- attributes .: "createdAt"
    amount <- attributes .: "amount"
    direction <- attributes .:? "direction"
    description <- attributes .: "description"
    status <- attributes .: "status"
    reason <- attributes .:? "reason"

    customer <- relationships .:? "customer"

    accountFrom <- relationships .: "account"
    accountTo <- relationships .: "counterpartyAccount"
    counterpartyCustomer <- relationships .:? "counterpartyCustomer"
    transaction <- relationships .:? "transaction"

    pure BookPayment {id = _id, ..}

instance J.ToJSON BookPayment where
  toJSON BookPayment {..} =
    let attributes =
          _omitNulls
            [ "createdAt" .= createdAt,
              "amount" .= amount,
              "direction" .= direction,
              "description" .= description,
              "status" .= status,
              "reason" .= reason
            ]
        relationships =
          _omitNulls
            [ "customer" .= customer,
              "account" .= accountFrom,
              "counterpartyAccount" .= accountTo,
              "counterpartyCustomer" .= counterpartyCustomer,
              "transaction" .= transaction
            ]
     in _omitNulls
          [ "id" .= id,
            "type" .= ("bookPayment" :: T.Text),
            "attributes" .= attributes,
            "relationships" .= relationships
          ]

data CreateBookPayment = CreateBookPayment
  { -- | The amount (in cents).
    amount :: !Int,
    -- | Payment description (maximum of 80 characters), this will show up on statement of the counterparty.
    description :: !T.Text,
    idempotencyKey :: !T.Text,
    tags :: Tags,
    accountFrom :: !AccountId,
    accountTo :: !AccountId
  }
  deriving (Show, Eq, Generic)

instance J.ToJSON CreateBookPayment where
  toJSON CreateBookPayment {..} =
    let attributes =
          _omitNulls
            [ "idempotencyKey" .= idempotencyKey,
              "amount" .= amount,
              "description" .= description,
              "tags" .= tags
            ]
        relationships =
          _omitNulls
            [ "account" .= J.toJSON accountFrom,
              "counterpartyAccount" .= J.toJSON accountTo
            ]
     in _omitNulls
          [ "type" .= ("bookPayment" :: T.Text),
            "attributes" .= attributes,
            "relationships" .= relationships
          ]
